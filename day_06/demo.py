#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
–ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–≥–∞–¥–∫–∞—Ö.
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent / "src"))

from main import ModelTester
from riddles import RiddleCollection
from model_client import LocalModelClient


async def demo_riddle_collection():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∑–∞–≥–∞–¥–æ–∫."""
    print("üß© –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∑–∞–≥–∞–¥–æ–∫")
    print("=" * 50)
    
    collection = RiddleCollection()
    riddles = collection.get_riddles()
    
    for i, riddle in enumerate(riddles, 1):
        print(f"\n{i}. {riddle.title}")
        print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {riddle.difficulty}/5")
        print(f"   –¢–µ–∫—Å—Ç: {riddle.text[:100]}...")
    
    print(f"\n–í—Å–µ–≥–æ –∑–∞–≥–∞–¥–æ–∫: {len(riddles)}")


async def demo_model_client():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏."""
    print("\nü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏")
    print("=" * 50)
    
    client = LocalModelClient(timeout=5.0)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π...")
        availability = await client.check_model_availability()
        
        for model_name, is_available in availability.items():
            status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" if is_available else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            print(f"  {model_name}: {status}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–Ω—É –∑–∞–≥–∞–¥–∫—É
        available_models = [name for name, available in availability.items() if available]
        
        if available_models:
            print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ {available_models[0]} –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–≥–∞–¥–∫–µ...")
            collection = RiddleCollection()
            simple_riddle = collection.get_riddle_by_difficulty(1)[0]
            
            result = await client.test_riddle(simple_riddle.text, available_models[0])
            
            print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            print(f"  –ú–æ–¥–µ–ª—å: {result.model_name}")
            print(f"  –ü—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç: {result.direct_answer[:100]}...")
            print(f"  –ü–æ—à–∞–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {result.stepwise_answer[:100]}...")
            print(f"  –í—Ä–µ–º—è –ø—Ä—è–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {result.direct_response_time:.2f}s")
            print(f"  –í—Ä–µ–º—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {result.stepwise_response_time:.2f}s")
        else:
            print("\n‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã:")
            print("  cd ../local_models && docker-compose up -d")
    
    finally:
        await client.close()


async def demo_full_testing():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("\nüöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    tester = ModelTester()
    
    try:
        print("–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        await tester.run_tests()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã:")
        print("  cd ../local_models && docker-compose up -d")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("üß† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
    print("=" * 60)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∑–∞–≥–∞–¥–æ–∫
    await demo_riddle_collection()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    await demo_model_client()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\n" + "=" * 60)
    try:
        response = input("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π? (y/N): ").strip().lower()
        
        if response in ['y', 'yes', '–¥–∞']:
            await demo_full_testing()
        else:
            print("–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
            print("–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: make run")
    except EOFError:
        # –ï—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ)
        print("–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º).")
        print("–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: make run")


if __name__ == "__main__":
    asyncio.run(main())
