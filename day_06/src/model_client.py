"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏
–ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ HTTP API.
"""

import asyncio
import json
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass

import httpx


@dataclass
class ModelResponse:
    """–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."""
    response: str
    response_tokens: int
    input_tokens: int
    total_tokens: int
    model_name: str
    response_time: float


@dataclass
class ModelTestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ –∑–∞–≥–∞–¥–∫–µ."""
    riddle: str
    model_name: str
    direct_answer: str
    stepwise_answer: str
    direct_response_time: float
    stepwise_response_time: float
    direct_tokens: int
    stepwise_tokens: int


class LocalModelClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏."""
    
    # –ú–∞–ø–ø–∏–Ω–≥ –º–æ–¥–µ–ª–µ–π –Ω–∞ –ø–æ—Ä—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ docker-compose.yml
    MODEL_PORTS = {
        "qwen": 8000,
        "mistral": 8001,
        "tinyllama": 8002
    }
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞.
        """
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        self.client = httpx.AsyncClient(timeout=120.0)
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞."""
        await self.client.aclose()
    
    async def _make_request(
        self, 
        model_name: str, 
        prompt: str
    ) -> ModelResponse:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏.
        
        Args:
            model_name: –ò–º—è –º–æ–¥–µ–ª–∏ (qwen, mistral, tinyllama)
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
            
        Returns:
            ModelResponse: –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            
        Raises:
            httpx.HTTPError: –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞
            ValueError: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
        """
        if model_name not in self.MODEL_PORTS:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å: {model_name}")
        
        port = self.MODEL_PORTS[model_name]
        url = f"http://localhost:{port}/chat"
        
        payload = {
            "messages": [{"role": "user", "content": prompt}],
            "max_tokens": 10000,  # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            "temperature": 0.7
        }
        
        start_time = asyncio.get_event_loop().time()
        
        try:
            response = await self.client.post(url, json=payload)
            response.raise_for_status()
            
            end_time = asyncio.get_event_loop().time()
            response_time = end_time - start_time
            
            data = response.json()
            
            return ModelResponse(
                response=data["response"],
                response_tokens=data["response_tokens"],
                input_tokens=data["input_tokens"],
                total_tokens=data["total_tokens"],
                model_name=model_name,
                response_time=response_time
            )
            
        except httpx.HTTPError as e:
            print(f"HTTP –æ—à–∏–±–∫–∞ –¥–ª—è {model_name}: {e}")
            raise httpx.HTTPError(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ {model_name}: {e}")
        except Exception as e:
            print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {model_name}: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–æ–¥–µ–ª—å—é {model_name}: {e}")
    
    async def test_riddle(
        self, 
        riddle: str, 
        model_name: str,
        verbose: bool = False
    ) -> ModelTestResult:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –∑–∞–≥–∞–¥–∫–µ –≤ –¥–≤—É—Ö —Ä–µ–∂–∏–º–∞—Ö.
        
        Args:
            riddle: –¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∫–∏
            model_name: –ò–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            verbose: –í—ã–≤–æ–¥–∏—Ç—å –ª–∏ –æ–±—â–µ–Ω–∏–µ —Å –º–æ–¥–µ–ª—å—é –≤ –∫–æ–Ω—Å–æ–ª—å
            
        Returns:
            ModelTestResult: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if verbose:
            print(f"\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_name}")
            print(f"üìù –ó–∞–≥–∞–¥–∫–∞: {riddle}")
        
        # –ü—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç
        direct_prompt = f"{riddle}\n–û—Ç–≤–µ—Ç:"
        if verbose:
            print(f"\nüí¨ –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ {model_name}...")
        direct_response = await self._make_request(model_name, direct_prompt)
        
        if verbose:
            print(f"‚úÖ –ü—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç ({direct_response.response_time:.2f}s):")
            print(f"   {direct_response.response}")
        
        # –ü–æ—à–∞–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        stepwise_prompt = f"{riddle}\n–†–µ—à–∞–π –ø–æ—à–∞–≥–æ–≤–æ –∏ –æ–±—ä—è—Å–Ω—è–π —Ö–æ–¥ –º—ã—Å–ª–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º."
        if verbose:
            print(f"\nüß† –ü–æ—à–∞–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ {model_name}...")
        stepwise_response = await self._make_request(model_name, stepwise_prompt)
        
        if verbose:
            print(f"‚úÖ –ü–æ—à–∞–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç ({stepwise_response.response_time:.2f}s):")
            print(f"   {stepwise_response.response}")
            print("-" * 60)
        
        return ModelTestResult(
            riddle=riddle,
            model_name=model_name,
            direct_answer=direct_response.response,
            stepwise_answer=stepwise_response.response,
            direct_response_time=direct_response.response_time,
            stepwise_response_time=stepwise_response.response_time,
            direct_tokens=direct_response.response_tokens,
            stepwise_tokens=stepwise_response.response_tokens
        )
    
    async def test_all_models(self, riddles: List[str], verbose: bool = False) -> List[ModelTestResult]:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ –≤—Å–µ—Ö –∑–∞–≥–∞–¥–∫–∞—Ö.
        
        Args:
            riddles: –°–ø–∏—Å–æ–∫ –∑–∞–≥–∞–¥–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            verbose: –í—ã–≤–æ–¥–∏—Ç—å –ª–∏ –æ–±—â–µ–Ω–∏–µ —Å –º–æ–¥–µ–ª—è–º–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
            
        Returns:
            List[ModelTestResult]: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        results = []
        
        for model_name in self.MODEL_PORTS.keys():
            for riddle in riddles:
                try:
                    result = await self.test_riddle(riddle, model_name, verbose)
                    results.append(result)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {model_name} –Ω–∞ –∑–∞–≥–∞–¥–∫–µ: {e}")
                    continue
        
        return results
    
    async def check_model_availability(self) -> Dict[str, bool]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π.
        
        Returns:
            Dict[str, bool]: –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        """
        availability = {}
        
        for model_name, port in self.MODEL_PORTS.items():
            try:
                url = f"http://localhost:{port}/chat"
                response = await self.client.post(
                    url, 
                    json={
                        "messages": [{"role": "user", "content": "test"}],
                        "max_tokens": 1
                    }
                )
                availability[model_name] = response.status_code == 200
            except:
                availability[model_name] = False
        
        return availability
