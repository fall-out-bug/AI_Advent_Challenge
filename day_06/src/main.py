"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–≥–∞–¥–∫–∞—Ö.

–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π,
–∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤, –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤.
"""

import asyncio
import sys
from typing import List

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç
try:
    from .model_client import LocalModelClient
    from .riddles import RiddleCollection
    from .report_generator import ReportGenerator
except ImportError:
    # –ï—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
    from model_client import LocalModelClient
    from riddles import RiddleCollection
    from report_generator import ReportGenerator


class ModelTester:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞."""
        self.client = LocalModelClient()
        self.riddle_collection = RiddleCollection()
        self.report_generator = ReportGenerator()
    
    async def run_tests(self) -> None:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞–≥–∞–¥–∫–∞—Ö
        –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞.
        """
        print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–≥–∞–¥–∫–∞—Ö")
        print("=" * 60)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
            await self._check_model_availability()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–∞–¥–æ–∫
            riddles = self.riddle_collection.get_riddles()
            riddle_texts = self.riddle_collection.get_riddle_texts()
            riddle_titles = [riddle.title for riddle in riddles]
            
            print(f"\nüìù –ù–∞–π–¥–µ–Ω–æ {len(riddles)} –∑–∞–≥–∞–¥–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            for i, riddle in enumerate(riddles, 1):
                print(f"  {i}. {riddle.title} (—Å–ª–æ–∂–Ω–æ—Å—Ç—å: {riddle.difficulty}/5)")
            
            # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
            print(f"\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            test_results = await self.client.test_all_models(riddle_texts)
            
            if not test_results:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(test_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
            comparison_results = self.report_generator.generate_comparison_results(
                test_results, riddle_titles, riddle_texts
            )
            
            report = self.report_generator.generate_markdown_report(comparison_results)
            report_filename = self.report_generator.save_report(report)
            
            print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_filename}")
            
            # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
            self._print_console_summary(comparison_results)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            sys.exit(1)
        
        finally:
            await self.client.close()
    
    async def _check_model_availability(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π."""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π...")
        
        availability = await self.client.check_model_availability()
        
        available_models = []
        for model_name, is_available in availability.items():
            status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" if is_available else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            print(f"  {model_name}: {status}")
            
            if is_available:
                available_models.append(model_name)
        
        if not available_models:
            print("\n‚ùå –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã:")
            print("  cd ../local_models && docker-compose up -d")
            sys.exit(1)
        
        print(f"\n‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(available_models)}")
    
    def _print_console_summary(self, results: List) -> None:
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å."""
        print("\n" + "=" * 60)
        print("üìã –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 60)
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º
        models = {}
        for result in results:
            if result.model_name not in models:
                models[result.model_name] = []
            models[result.model_name].append(result)
        
        for model_name, model_results in models.items():
            print(f"\nü§ñ –ú–æ–¥–µ–ª—å: {model_name}")
            print("-" * 40)
            
            avg_word_diff = sum(r.word_difference for r in model_results) / len(model_results)
            avg_direct_time = sum(r.direct_response_time for r in model_results) / len(model_results)
            avg_stepwise_time = sum(r.stepwise_response_time for r in model_results) / len(model_results)
            
            print(f"  –°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Å–ª–æ–≤–∞—Ö: {avg_word_diff:.1f}")
            print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä—è–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {avg_direct_time:.2f}s")
            print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {avg_stepwise_time:.2f}s")
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
            stepwise_with_logic = sum(
                1 for r in model_results 
                if r.stepwise_analysis['has_logical_keywords']
            )
            stepwise_with_structure = sum(
                1 for r in model_results 
                if r.stepwise_analysis['has_step_by_step']
            )
            
            print(f"  –ü–æ—à–∞–≥–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ª–æ–≥–∏–∫–æ–π: {stepwise_with_logic}/{len(model_results)}")
            print(f"  –ü–æ—à–∞–≥–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π: {stepwise_with_structure}/{len(model_results)}")
        
        print("\n" + "=" * 60)
        print("üéØ –í–´–í–û–î–´:")
        print("=" * 60)
        
        # –û–±—â–∏–µ –≤—ã–≤–æ–¥—ã
        total_results = len(results)
        if total_results == 0:
            print("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
            
        avg_word_diff = sum(r.word_difference for r in results) / total_results
        
        if avg_word_diff > 0:
            print(f"‚úÖ –ü–æ—à–∞–≥–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Å—Ä–µ–¥–Ω–µ–º –¥–ª–∏–Ω–Ω–µ–µ –Ω–∞ {avg_word_diff:.1f} —Å–ª–æ–≤")
        else:
            print(f"‚ö†Ô∏è  –ü–æ—à–∞–≥–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–µ –≤—Å–µ–≥–¥–∞ –¥–ª–∏–Ω–Ω–µ–µ –ø—Ä—è–º—ã—Ö")
        
        # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
        stepwise_with_logic = sum(
            1 for r in results 
            if r.stepwise_analysis['has_logical_keywords']
        )
        logic_percentage = (stepwise_with_logic / total_results) * 100
        
        print(f"üìä {logic_percentage:.1f}% –ø–æ—à–∞–≥–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
        
        print("\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Markdown —Ñ–∞–π–ª")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    tester = ModelTester()
    await tester.run_tests()


if __name__ == "__main__":
    asyncio.run(main())
