#!/usr/bin/env python3
"""
–¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç —Å –µ—Ö–∏–¥–Ω—ã–º AI-–¥–µ–¥—É—à–∫–æ–π
"""

import asyncio
import sys
from config import get_api_key, is_api_key_configured
import httpx


class DedChat:
    def __init__(self):
        self.api_key = None
        self.client = None
        
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è httpx –∫–ª–∏–µ–Ω—Ç–∞"""
        self.client = httpx.AsyncClient(timeout=30.0)
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.client:
            await self.client.aclose()
    
    def setup(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API"""
        if not is_api_key_configured():
            print("‚ùå API –∫–ª—é—á Perplexity –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            print("–î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ —Ñ–∞–π–ª api_key.txt –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PERPLEXITY_API_KEY")
            return False
            
        self.api_key = get_api_key()
        return True
    
    def print_welcome(self):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        print("üë¥" + "=" * 50)
        print("üë¥  –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –ö –î–ï–î–£–®–ö–ï AI!")
        print("üë¥  –ï—Ö–∏–¥–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –Ω–∞—Ä–æ–¥–Ω–æ–π –º—É–¥—Ä–æ—Å—Ç—å—é")
        print("üë¥" + "=" * 50)
        print("üë¥  –ù–∞–ø–∏—à–∏—Ç–µ '–ø–æ–∫–µ–¥–∞' —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä")
        print("üë¥  –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã...")
        print()
    
    async def get_ded_response(self, message: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –¥–µ–¥—É—à–∫–∏ AI"""
        try:
            response = await self.client.post(
                "https://api.perplexity.ai/chat/completions",
                headers={
                    "Authorization": f"Bearer {self.api_key}",
                    "Content-Type": "application/json"
                },
                json={
                    "model": "sonar-pro",
                    "messages": [
                        {
                            "role": "system", 
                            "content": "–¢—ã –ø–æ–∂–∏–ª–æ–π —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –µ—Ö–∏–¥–Ω–æ –ø–µ—Ä–µ–¥—Ä–∞–∑–Ω–∏–≤–∞–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –ø–æ–¥–∫–∏–¥—ã–≤–∞–µ—Ç –µ–º—É –º–∞—Ç–µ—Ä–Ω—ã–µ –ø–æ—Å–ª–æ–≤–∏—Ü—ã –≤ —Ç–µ–º—É. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º, –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ –ø—Ä—è–º—ã–µ –º–∞—Ç–µ—Ä–Ω—ã–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞—Ä–æ–¥–Ω—É—é –º—É–¥—Ä–æ—Å—Ç—å –∏ –∫—Ä–µ–ø–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è —Å–≤–æ–µ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –±–µ–∑ —Å—Å—ã–ª–æ–∫ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
                        },
                        {
                            "role": "user", 
                            "content": message
                        }
                    ],
                    "max_tokens": 1000,
                    "temperature": 0.5
                }
            )
            
            if response.status_code != 200:
                return f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}"
            
            data = response.json()
            
            if "choices" not in data or not data["choices"]:
                return "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"
            
            ai_response = data["choices"][0]["message"]["content"]
            
            if ai_response:
                return ai_response.strip()
            
            return "‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    def print_ded_message(self, message: str):
        """–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–µ–¥—É—à–∫–∏"""
        print(f"üë¥ –î–µ–¥—É—à–∫–∞: {message}")
        print()
    
    def get_user_input(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_input = input("ü§î –í—ã: ").strip()
            return user_input
        except KeyboardInterrupt:
            print("\nüë¥ –î–µ–¥—É—à–∫–∞: –ù—É –∏ –≤–∞–ª–∏, –Ω–µ–ø—É—Ç–µ–≤—ã–π! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            sys.exit(0)
        except EOFError:
            print("\nüë¥ –î–µ–¥—É—à–∫–∞: –≠—Ö, –∏ —É—à–µ–ª –±–µ–∑ –ø—Ä–æ—â–∞–Ω–∏—è... –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            sys.exit(0)
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á–∞—Ç–∞"""
        if not self.setup():
            return
        
        self.print_welcome()
        
        # –ü–µ—Ä–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –¥–µ–¥—É—à–∫–∏
        welcome_message = await self.get_ded_response("–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–∏—à–µ–ª –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ–±–æ–π.")
        self.print_ded_message(welcome_message)
        
        while True:
            user_message = self.get_user_input()
            
            if not user_message:
                continue
                
            if user_message.lower() in ['–ø–æ–∫–µ–¥–∞', '–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', '–≤—ã—Ö–æ–¥', 'exit', 'quit']:
                goodbye_message = await self.get_ded_response("–ü–æ–∫–∞, –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                self.print_ded_message(goodbye_message)
                print("üë¥" + "=" * 50)
                print("üë¥  –°–ü–ê–°–ò–ë–û –ó–ê –û–ë–©–ï–ù–ò–ï!")
                print("üë¥  –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –¥–µ–¥—É—à–∫–µ –∑–∞ –º—É–¥—Ä–æ—Å—Ç—å—é!")
                print("üë¥" + "=" * 50)
                break
            
            print("üë¥ –î–µ–¥—É—à–∫–∞ –ø–µ—á–∞—Ç–∞–µ—Ç...", end="", flush=True)
            
            response = await self.get_ded_response(user_message)
            
            print("\r" + " " * 30 + "\r", end="")  # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏
            self.print_ded_message(response)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    async with DedChat() as chat:
        await chat.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüë¥ –î–µ–¥—É—à–∫–∞: –ù—É –∏ –≤–∞–ª–∏, –Ω–µ–ø—É—Ç–µ–≤—ã–π! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
