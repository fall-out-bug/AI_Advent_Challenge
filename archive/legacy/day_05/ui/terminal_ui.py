"""
Terminal UI for chat application.

Following Python Zen: "Simple is better than complex"
and "Readability counts".
"""

import sys
import shutil
import textwrap
from typing import Optional, Dict, Any

# Mock LOCAL_MODELS for testing
try:
    from shared_package.config.models import LOCAL_MODELS
except ImportError:
    LOCAL_MODELS = {
        "qwen": "http://localhost:8000",
        "mistral": "http://localhost:8001", 
        "tinyllama": "http://localhost:8002"
    }


class TerminalUI:
    """Handles all terminal UI operations for chat application."""
    
    def __init__(self, chat_state):
        """Initialize UI with chat state reference."""
        self.state = chat_state
    
    def print_welcome(self) -> None:
        """Print welcome message and help."""
        print("üë¥" + "=" * 60)
        print("üë¥  –î–ï–î–£–®–ö–ê AI v5 ‚Äî –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –ü–æ—è—Å–Ω—è–π, –°–æ–≤–µ—Ç—á–∏–∫ –∏ –õ–æ–∫–∞–ª—å–Ω—ã–µ –ú–æ–¥–µ–ª–∏")
        print("üë¥" + "=" * 60)
        print("üë£ –ö–∞–∫ –æ–±—â–∞—Ç—å—Å—è:")
        print("  ‚Ä¢ –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã. –Ø –æ—Ç–≤–µ—á—É –µ—Ö–∏–¥–Ω–æ –∏ –ø–æ –¥–µ–ª—É.")
        print("  ‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: –Ω–∏–∂–µ ‚Äî —Ç–æ—á–Ω–µ–µ, –≤—ã—à–µ ‚Äî —Å–º–µ–ª–µ–µ.")
        print()
        self._print_commands()
        self._print_triggers()
        self._print_models()
        print()
    
    def _print_commands(self) -> None:
        """Print available commands."""
        print("üîß –ö–æ–º–∞–Ω–¥—ã:")
        print("  ‚Ä¢ temp <value>         ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (0.0‚Äì1.5)")
        print("  ‚Ä¢ –æ–±—ä—è—Å–Ω—è–π             ‚Äî –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ—è—Å–Ω–µ–Ω–∏–π (–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å T –∏ –º–æ–¥–µ–ª—å)")
        print("  ‚Ä¢ –Ω–∞–¥–æ–µ–ª               ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏—è –∏/–∏–ª–∏ —Å–æ–≤–µ—Ç—á–∏–∫–∞")
        print("  ‚Ä¢ –¥–∞–π —Å–æ–≤–µ—Ç            ‚Äî –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Å–æ–≤–µ—Ç—á–∏–∫–∞")
        print("  ‚Ä¢ –∏—Å—Ç–æ—Ä–∏—è –≤–∫–ª/–≤—ã–∫–ª     ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("  ‚Ä¢ –æ—á–∏—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é       ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π)")
        print("  ‚Ä¢ –ø–æ–∫–µ–¥–∞               ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä")
        print("  ‚Ä¢ api <provider>       ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å API (chadgpt, perplexity, local-qwen, local-mistral, local-tinyllama)")
        print()
    
    def _print_triggers(self) -> None:
        """Print temperature triggers."""
        print("üì¶ –¢—Ä–∏–≥–≥–µ—Ä—ã –∞–≤—Ç–æ‚Äë—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–ø–æ —Ç–µ–∫—Å—Ç—É –æ—Ç–≤–µ—Ç–∞):")
        print("  ‚Ä¢ '–Ω–µ –¥—É—à–Ω–∏' ‚Üí T=0.0   ‚Ä¢ '–ø–æ—Ç–∏—à–µ' ‚Üí T=0.7   ‚Ä¢ '—Ä–∞–∑–≥–æ–Ω—è–π' ‚Üí T=1.2")
        print()
    
    def _print_models(self) -> None:
        """Print available models."""
        print("ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        for name, url in LOCAL_MODELS.items():
            status = "üü¢" if self.state.current_api == name else "‚ö™"
            print(f"  {status} {name} ‚Äî {url}")
    
    def print_ded_message(self, message: str, eff_temp: Optional[float] = None) -> None:
        """
        Pretty-print model message with optional temperature indicator.
        
        Args:
            message: The response message from the AI model
            eff_temp: Effective temperature used for generation (optional)
            
        Note:
            Temperature indicator is only shown when explain_mode is enabled
        """
        width = shutil.get_terminal_size((100, 20)).columns
        prefix = "üë¥ –î–µ–¥—É—à–∫–∞"
        
        if self.state.explain_mode:
            t = eff_temp if eff_temp is not None else self.state.default_temperature
            model_label = self._get_model_label()
            prefix = f"{prefix} [T={t:.2f} ‚Ä¢ {model_label}]"
        
        wrapped = textwrap.fill(f"{prefix}: {message}", width=width)
        print(wrapped)
        print()
    
    def _get_model_label(self) -> str:
        """Get human-readable model label."""
        if self.state.current_api in self.state.local_clients:
            return f"local:{self.state.current_api}"
        elif self.state.current_api == "chadgpt":
            return "chadgpt:gpt-5-mini"
        return f"perplexity:sonar-pro"
    
    def print_debug_info(
        self, 
        user_message: str, 
        reply_data: Dict[str, Any], 
        eff_temp: float, 
        sys_prompt: Optional[str], 
        duration_ms: int
    ) -> None:
        """Print extended debug info in explain mode."""
        if not self.state.explain_mode:
            return
            
        width = shutil.get_terminal_size((100, 20)).columns
        model_label = self._get_model_label()
        endpoint = self._get_api_endpoint()
        mode = "advice" if sys_prompt else "normal"
        prompt_preview = (sys_prompt or self.state.get_system_prompt())[:120].replace("\n", " ")
        
        debug_lines = [
            f"üîç DEBUG [{mode}]",
            f"  Model: {model_label}",
            f"  Endpoint: {endpoint}",
            f"  Temperature: {eff_temp:.3f}",
            f"  Duration: {duration_ms}ms",
            f"  Tokens: {reply_data.get('total_tokens', 0)}",
            f"  Prompt: {prompt_preview}...",
            f"  User: {user_message[:80]}..."
        ]
        
        for line in debug_lines:
            print(textwrap.fill(line, width=width))
        print()
    
    def _get_api_endpoint(self) -> str:
        """Get API endpoint URL for current provider."""
        if self.state.current_api in self.state.local_clients:
            from shared_package.config.models import LOCAL_MODELS
            return LOCAL_MODELS[self.state.current_api]
        elif self.state.current_api == "chadgpt":
            return "https://ask.chadgpt.ru/api/public/gpt-5-mini"
        return "https://api.perplexity.ai/chat/completions"
    
    def get_user_input(self) -> str:
        """Read user input with temperature indicator."""
        try:
            t = f"{self.state.default_temperature:.2f}"
            mode = " [–ü–û–Ø–°–ù–Ø–ô]" if self.state.explain_mode else ""
            model_label = self._get_model_label()
            return input(f"ü§î –í—ã{mode} [T={t} ‚Ä¢ {model_label}]: ").strip()
        except KeyboardInterrupt:
            print("\nüë¥ –î–µ–¥—É—à–∫–∞: –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            sys.exit(0)
        except EOFError:
            print("\nüë¥ –î–µ–¥—É—à–∫–∞: –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            sys.exit(0)
    
    def print_error(self, message: str) -> None:
        """Print error message."""
        print(f"‚ùå {message}")
    
    def print_success(self, message: str) -> None:
        """Print success message."""
        print(f"‚úÖ {message}")
    
    def print_info(self, message: str) -> None:
        """Print info message."""
        print(f"‚ÑπÔ∏è  {message}")
