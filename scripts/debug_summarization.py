#!/usr/bin/env python3
"""Debug script to show posts, prompts, and summaries."""

import asyncio
import sys
import json
from pathlib import Path
from dotenv import dotenv_values

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Load environment variables
env_vars = dotenv_values(project_root / ".env")
import os
os.environ.update(env_vars)

from src.infrastructure.llm.summarizer import summarize_posts
from src.infrastructure.clients.llm_client import ResilientLLMClient
from src.infrastructure.monitoring.logger import get_logger

logger = get_logger(name="debug_summarization")

async def debug_summarization():
    """Debug summarization with detailed output."""
    
    # Sample posts (similar to what would come from channel)
    posts = [
        {
            "text": "–í –∫–∞–Ω–∞–ª–µ xor_journal –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏ –æ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ xor_journal.",
            "date": "2025-10-29T20:00:00Z"
        },
        {
            "text": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ xor_journal –¥–µ–ª—è—Ç—Å—è –æ–ø—ã—Ç–æ–º –∏ —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏.",
            "date": "2025-10-29T21:00:00Z"
        },
        {
            "text": "–û–±—Å—É–∂–¥–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.",
            "date": "2025-10-29T22:00:00Z"
        }
    ]
    
    print("=" * 80)
    print("üìã INPUT POSTS")
    print("=" * 80)
    for i, post in enumerate(posts, 1):
        print(f"\nPost {i}:")
        print(f"  Text: {post['text']}")
        print(f"  Date: {post.get('date', 'N/A')}")
    
    print("\n" + "=" * 80)
    print("üîß LLM CLIENT SETUP")
    print("=" * 80)
    llm_client = ResilientLLMClient()
    print(f"LLM URL from env: {os.getenv('LLM_URL', 'NOT SET')}")
    
    # Monkey patch to capture prompt
    original_generate = llm_client.generate
    captured_prompt = None
    
    async def capture_generate(prompt, temperature=0.2, max_tokens=256):
        nonlocal captured_prompt
        captured_prompt = prompt
        print("\n" + "=" * 80)
        print("üìù SENT PROMPT")
        print("=" * 80)
        print(prompt)
        print("=" * 80)
        return await original_generate(prompt, temperature, max_tokens)
    
    llm_client.generate = capture_generate
    
    print("\n" + "=" * 80)
    print("üöÄ CALLING SUMMARIZE_POSTS")
    print("=" * 80)
    
    summary = await summarize_posts(posts, max_sentences=3, llm=llm_client)
    
    print("\n" + "=" * 80)
    print("üìÑ SUMMARY RESULT")
    print("=" * 80)
    print(summary)
    print("=" * 80)
    
    # Also test with actual channel posts
    print("\n" + "=" * 80)
    print("üîç TESTING WITH REAL CHANNEL POSTS")
    print("=" * 80)
    
    try:
        from src.presentation.mcp.tools.digest_tools import get_channel_digest
        
        user_id = 204047849
        digest = await get_channel_digest(user_id, hours=24)
        
        print(f"\nUser ID: {user_id}")
        print(f"Channels found: {len(digest.get('channels', []))}")
        
        for channel in digest.get('channels', []):
            channel_name = channel.get('name', 'unknown')
            posts = channel.get('posts', [])
            summary = channel.get('summary', '')
            
            print(f"\n{'='*80}")
            print(f"üìå Channel: {channel_name}")
            print(f"{'='*80}")
            print(f"\nPosts ({len(posts)}):")
            for i, post in enumerate(posts[:3], 1):  # Show first 3
                text = post.get('text', '')[:200]
                print(f"  {i}. {text}...")
            
            print(f"\nSummary:")
            print(f"  {summary}")
            
    except Exception as e:
        print(f"\nError fetching real channel posts: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(debug_summarization())

