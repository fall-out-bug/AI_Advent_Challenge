# Multi-stage build for MCP server
FROM python:3.11-slim AS builder

WORKDIR /build

# Install poetry
RUN pip install --no-cache-dir poetry

# Copy dependency files
COPY pyproject.toml poetry.lock* ./

# Install dependencies using poetry
# Single source of truth: dependencies come from pyproject.toml
RUN poetry config virtualenvs.create false && \
    poetry install --no-dev --no-interaction --no-ansi

# Final stage
FROM python:3.11-slim

ENV PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    DEBIAN_FRONTEND=noninteractive \
    MODEL_TIMEOUT_SECONDS=60

# Install runtime dependencies (including curl for healthchecks and WeasyPrint dependencies)
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    python3-cffi \
    libpango-1.0-0 \
    libpangoft2-1.0-0 \
    libharfbuzz0b \
    libgobject-2.0-0 \
    libcairo2 \
    libgdk-pixbuf-2.0-0 \
    shared-mime-info \
    fonts-dejavu-core \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy Python dependencies from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy only necessary files
COPY shared/ /app/shared/
COPY src/presentation/mcp/ /app/src/presentation/mcp/
COPY src/domain/ /app/src/domain/
COPY src/application/ /app/src/application/
COPY src/infrastructure/ /app/src/infrastructure/
COPY config/ /app/config/
COPY pyproject.toml ./

# Create non-root user for security
RUN useradd -m -u 1000 mcpuser && \
    chown -R mcpuser:mcpuser /app

USER mcpuser

# Expose port for HTTP server
EXPOSE 8004

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8004/health || exit 1

# MCP server runs via HTTP server
CMD ["python", "src/presentation/mcp/http_server.py"]
