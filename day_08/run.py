"""
Unified entry point for the token analysis system.

This module provides a single entry point that replaces multiple
main files (main.py, main_enhanced.py, demo.py) with a clean,
configurable interface.
"""

import asyncio
import sys
import os
from pathlib import Path
from typing import Optional, Dict, Any

# Add shared package to path
shared_path = Path(__file__).parent.parent / "shared"
sys.path.insert(0, str(shared_path))

from core.bootstrap import ApplicationBootstrapper, BootstrapError
from models.application_context import ApplicationContext
from utils.logging import LoggerFactory


async def run_experiments(context: ApplicationContext) -> None:
    """
    Run full token limit experiments.
    
    Args:
        context: Application context with all components
    """
    context.logger.info("Starting full token limit experiments")
    
    try:
        # Check StarCoder availability
        context.logger.info("Checking StarCoder availability")
        is_available = await context.ml_client.check_availability("starcoder")
        
        if not is_available:
            context.logger.error("StarCoder is not available")
            print("‚ùå StarCoder –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd ../local_models && docker-compose up -d starcoder-chat")
            return
        
        context.logger.info("StarCoder is available")
        print("‚úÖ StarCoder –¥–æ—Å—Ç—É–ø–µ–Ω!")
        
        # Run experiments
        context.logger.info("Running limit exceeded experiments")
        print("\nüß™ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–æ–≤...")
        
        results = await context.experiments.run_limit_exceeded_experiment("starcoder")
        
        if not results:
            context.logger.error("No experiment results received")
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤")
            return
        
        context.logger.info(f"Received {len(results)} experiment results")
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤")
        
        # Generate reports
        await _generate_reports(context, results)
        
        # Show summary
        await _show_experiment_summary(context, results)
        
        context.logger.info("Experiments completed successfully")
        print("\nüéâ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        context.logger.error(f"Error during experiments: {e}")
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {e}")
        raise


async def run_demo(context: ApplicationContext) -> None:
    """
    Run demo with short queries for quick testing.
    
    Args:
        context: Application context with all components
    """
    context.logger.info("Starting demo with short queries")
    
    try:
        # Check availability
        is_available = await context.ml_client.check_availability("starcoder")
        if not is_available:
            print("‚ùå StarCoder –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            return
        
        # Run short query experiments
        context.logger.info("Running short query experiments")
        results = await context.experiments.run_short_query_experiment("starcoder")
        
        # Generate basic reports
        context.reporter.print_experiment_summary(results)
        context.reporter.print_detailed_analysis(results)
        context.reporter.print_recommendations(results)
        
        context.logger.info("Demo completed successfully")
        print("\n‚úÖ –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        context.logger.error(f"Error during demo: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ: {e}")
        raise


async def run_comparison(context: ApplicationContext) -> None:
    """
    Run model comparison experiments.
    
    Args:
        context: Application context with all components
    """
    context.logger.info("Starting model comparison experiments")
    
    try:
        # Check availability
        is_available = await context.ml_client.check_availability("starcoder")
        if not is_available:
            print("‚ùå StarCoder –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            return
        
        # Run model comparison
        context.logger.info("Running model comparison")
        models = ["starcoder", "mistral", "qwen"]
        query = "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –º–µ—Ö–∞–Ω–∏–∑–º–∞ –≤–Ω–∏–º–∞–Ω–∏—è –≤ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞—Ö"
        
        results = await context.experiments.run_model_comparison_experiment(
            models=models,
            query=query,
            auto_swap=True
        )
        
        # Generate reports
        await _generate_reports(context, results)
        
        context.logger.info("Model comparison completed successfully")
        print("\nüéâ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        context.logger.error(f"Error during model comparison: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        raise


async def run_advanced_compression(context: ApplicationContext) -> None:
    """
    Run advanced compression experiments.
    
    Args:
        context: Application context with all components
    """
    context.logger.info("Starting advanced compression experiments")
    
    try:
        # Run advanced compression experiments
        context.logger.info("Running advanced compression experiments")
        strategies = ["truncation", "keywords", "extractive", "semantic"]
        
        results = await context.experiments.run_advanced_compression_experiment(
            model_name="starcoder",
            strategies=strategies
        )
        
        # Generate reports
        await _generate_reports(context, results)
        
        context.logger.info("Advanced compression experiments completed successfully")
        print("\nüéâ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å–∂–∞—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except Exception as e:
        context.logger.error(f"Error during advanced compression: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ö: {e}")
        raise


async def _generate_reports(context: ApplicationContext, results: list) -> None:
    """
    Generate all reports for experiment results.
    
    Args:
        context: Application context
        results: Experiment results
    """
    context.logger.info("Generating reports")
    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...")
    
    context.reporter.print_experiment_summary(results)
    context.reporter.print_detailed_analysis(results)
    context.reporter.print_recommendations(results)
    context.reporter.print_compression_comparison(results)
    context.reporter.print_model_performance(results)
    
    context.logger.info("All reports generated")
    print("‚úÖ –í—Å–µ –æ—Ç—á–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")


async def _show_experiment_summary(context: ApplicationContext, results: list) -> None:
    """
    Show experiment summary statistics.
    
    Args:
        context: Application context
        results: Experiment results
    """
    context.logger.info("Showing experiment summary")
    
    summary = context.experiments.get_experiment_summary(results)
    print(f"\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {summary['total_experiments']}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {summary['successful_experiments']}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {summary['success_rate']*100:.1f}%")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {summary['avg_response_time']:.2f} —Å–µ–∫")
    print(f"   –û–±—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {summary['total_tokens_used']}")


def load_config() -> Dict[str, Any]:
    """
    Load configuration from environment variables.
    
    Returns:
        Dict[str, Any]: Configuration dictionary
    """
    config = {
        'token_counter_mode': os.getenv("TOKEN_COUNTER_MODE", "simple"),
        'limit_profile': os.getenv("LIMIT_PROFILE", "practical"),
        'ml_service_url': os.getenv("ML_SERVICE_URL", "http://localhost:8004"),
        'log_level': os.getenv("LOG_LEVEL", "INFO"),
        'debug': os.getenv("DEBUG", "false").lower() == "true"
    }
    
    return config


def print_help() -> None:
    """Print help information."""
    print("""
üöÄ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–æ–≤ - Day 8

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python run.py                    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
    python run.py --demo             # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    python run.py --comparison       # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    python run.py --advanced         # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å–∂–∞—Ç–∏—è
    python run.py --help             # –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
    TOKEN_COUNTER_MODE=simple        # –†–µ–∂–∏–º –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
    LIMIT_PROFILE=practical          # –ü—Ä–æ—Ñ–∏–ª—å –ª–∏–º–∏—Ç–æ–≤ (theoretical/practical)
    ML_SERVICE_URL=http://localhost:8004  # URL ML —Å–µ—Ä–≤–∏—Å–∞
    LOG_LEVEL=INFO                   # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    DEBUG=false                      # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - StarCoder –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω (–ø–æ—Ä—Ç 8003)
    - –ó–∞–ø—É—Å–∫: cd ../local_models && docker-compose up -d starcoder-chat

–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã:
    1. –ë–µ–∑ —Å–∂–∞—Ç–∏—è - –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ –µ—Å—Ç—å
    2. –°–∂–∞—Ç–∏–µ —á–µ—Ä–µ–∑ –æ–±—Ä–µ–∑–∫—É - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
    3. –°–∂–∞—Ç–∏–µ —á–µ—Ä–µ–∑ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Å–ª–æ–≤

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
    - –ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
    - –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∂–∞—Ç–∏—è
    - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    """)


async def main() -> None:
    """
    Main function that orchestrates the token analysis system.
    
    Initializes all components using ApplicationBootstrapper,
    then runs the selected experiment type.
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–æ–≤")
    print("="*50)
    
    try:
        # Load configuration
        config = load_config()
        
        # Initialize application
        bootstrapper = ApplicationBootstrapper(config)
        context = bootstrapper.bootstrap()
        
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config}")
        
        # Determine experiment type
        experiment_type = _get_experiment_type()
        
        # Run selected experiment
        await _run_experiment(context, experiment_type)
        
    except BootstrapError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        # Cleanup
        if 'context' in locals():
            await context.cleanup()


def _get_experiment_type() -> str:
    """
    Get experiment type from command line arguments.
    
    Returns:
        str: Experiment type
    """
    if len(sys.argv) > 1:
        arg = sys.argv[1]
        if arg == "--demo":
            return "demo"
        elif arg == "--comparison":
            return "comparison"
        elif arg == "--advanced":
            return "advanced"
        elif arg == "--help":
            print_help()
            sys.exit(0)
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
            sys.exit(1)
    
    return "full"


async def _run_experiment(context: ApplicationContext, experiment_type: str) -> None:
    """
    Run the specified experiment type.
    
    Args:
        context: Application context
        experiment_type: Type of experiment to run
    """
    if experiment_type == "demo":
        await run_demo(context)
    elif experiment_type == "comparison":
        await run_comparison(context)
    elif experiment_type == "advanced":
        await run_advanced_compression(context)
    else:  # full
        await run_experiments(context)


if __name__ == "__main__":
    asyncio.run(main())
