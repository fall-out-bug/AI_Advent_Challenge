"""
Main entry point for the token analysis system.

This module provides the main function that orchestrates all components
to run experiments with token limits and compression strategies.
"""

import asyncio
import sys
import os
from pathlib import Path

# Add shared package to path
shared_path = Path(__file__).parent.parent / "shared"
sys.path.insert(0, str(shared_path))

from shared_package.clients.unified_client import UnifiedModelClient
from core.token_analyzer import TokenCounter, LimitProfile
from core.text_compressor import SimpleTextCompressor, AdvancedTextCompressor
from core.ml_client import TokenAnalysisClient, HybridTokenCounter
from core.experiments import TokenLimitExperiments
from utils.console_reporter import ConsoleReporter


async def main():
    """
    Main function that orchestrates the token analysis system.
    
    Initializes all components, checks model availability,
    runs experiments, and generates reports.
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–æ–≤")
    print("="*50)
    
    try:
        # Initialize components
        print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        token_counter = SimpleTokenCounter()
        text_compressor = SimpleTextCompressor(token_counter)
        model_client = UnifiedModelClient()
        reporter = ConsoleReporter()
        
        print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # Check StarCoder availability
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ StarCoder...")
        is_available = await model_client.check_availability("starcoder")
        
        if not is_available:
            print("‚ùå StarCoder –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd ../local_models && docker-compose up -d starcoder-chat")
            print("üí° –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8003")
            return
        
        print("‚úÖ StarCoder –¥–æ—Å—Ç—É–ø–µ–Ω!")
        
        # Create experimenter
        print("\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞...")
        experimenter = TokenLimitExperiments(model_client, token_counter, text_compressor)
        print("‚úÖ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # Run limit exceeded experiments
        print("\nüß™ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–æ–≤...")
        results = await experimenter.run_limit_exceeded_experiment("starcoder")
        
        if not results:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤")
            return
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤")
        
        # Generate reports
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...")
        
        # Summary report
        reporter.print_experiment_summary(results)
        
        # Detailed analysis
        reporter.print_detailed_analysis(results)
        
        # Recommendations
        reporter.print_recommendations(results)
        
        # Additional analysis
        reporter.print_compression_comparison(results)
        reporter.print_model_performance(results)
        
        print("\n‚úÖ –í—Å–µ –æ—Ç—á–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        
        # Show experiment summary
        summary = experimenter.get_experiment_summary(results)
        print(f"\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {summary['total_experiments']}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {summary['successful_experiments']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {summary['success_rate']*100:.1f}%")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {summary['avg_response_time']:.2f} —Å–µ–∫")
        print(f"   –û–±—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {summary['total_tokens_used']}")
        
        print("\nüéâ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {e}")
        print(f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        raise


async def run_short_query_demo():
    """
    Run a demo with short queries for quick testing.
    
    This function can be used for quick testing without
    running the full limit-exceeded experiments.
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏")
    print("="*50)
    
    try:
        # Initialize components
        token_counter = SimpleTokenCounter()
        text_compressor = SimpleTextCompressor(token_counter)
        model_client = UnifiedModelClient()
        reporter = ConsoleReporter()
        
        # Check availability
        is_available = await model_client.check_availability("starcoder")
        if not is_available:
            print("‚ùå StarCoder –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            return
        
        # Run short query experiments
        experimenter = TokenLimitExperiments(model_client, token_counter, text_compressor)
        results = await experimenter.run_short_query_experiment("starcoder")
        
        # Generate reports
        reporter.print_experiment_summary(results)
        reporter.print_detailed_analysis(results)
        reporter.print_recommendations(results)
        
        print("\n‚úÖ –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ: {e}")
        raise


def print_help():
    """Print help information."""
    print("""
üöÄ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–æ–≤ - Day 8

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python main.py              # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
    python main.py --demo       # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    python main.py --help       # –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - StarCoder –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω (–ø–æ—Ä—Ç 8003)
    - –ó–∞–ø—É—Å–∫: cd ../local_models && docker-compose up -d starcoder-chat

–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã:
    1. –ë–µ–∑ —Å–∂–∞—Ç–∏—è - –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ –µ—Å—Ç—å
    2. –°–∂–∞—Ç–∏–µ —á–µ—Ä–µ–∑ –æ–±—Ä–µ–∑–∫—É - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
    3. –°–∂–∞—Ç–∏–µ —á–µ—Ä–µ–∑ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Å–ª–æ–≤

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
    - –ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
    - –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∂–∞—Ç–∏—è
    - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    """)


if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] == "--demo":
            asyncio.run(run_short_query_demo())
        elif sys.argv[1] == "--help":
            print_help()
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
    else:
        asyncio.run(main())
