"""
Console reporting module for displaying experiment results.

This module provides methods to display experiment results in a
clear, formatted way in the console, including summaries, analysis,
and recommendations.
"""

from typing import Any, Dict, List

from models.data_models import ExperimentResult


class ConsoleReporter:
    """
    Console reporter for displaying experiment results.

    Provides methods to format and display experiment results
    in a clear, readable format in the console.
    """

    def print_experiment_summary(self, results: List[ExperimentResult]) -> None:
        """
        Print summary of all experiments.

        Args:
            results: List of experiment results to summarize
        """
        if not results:
            print("\n‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        print("\n" + "=" * 80)
        print("üìä –°–í–û–î–ö–ê –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–û–í –° –¢–û–ö–ï–ù–ê–ú–ò")
        print("=" * 80)

        for i, result in enumerate(results, 1):
            print(f"\nüî¨ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {i}: {result.experiment_name}")
            print(f"   –ú–æ–¥–µ–ª—å: {result.model_name}")
            print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {result.response_time:.2f} —Å–µ–∫")
            print(f"   –í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {result.input_tokens}")
            print(f"   –í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {result.output_tokens}")
            print(f"   –û–±—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {result.total_tokens}")
            print(
                f"   –°–∂–∞—Ç–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {'–î–∞' if result.compression_applied else '–ù–µ—Ç'}"
            )

            if result.compression_result:
                print(
                    f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {result.compression_result.compression_ratio:.2f}"
                )
                print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∂–∞—Ç–∏—è: {result.compression_result.strategy_used}")

            print(f"   –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(result.response)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.timestamp.strftime('%H:%M:%S')}")

    def print_detailed_analysis(self, results: List[ExperimentResult]) -> None:
        """
        Print detailed analysis of experiment results.

        Args:
            results: List of experiment results to analyze
        """
        if not results:
            print("\n‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        print("\n" + "=" * 80)
        print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó")
        print("=" * 80)

        # Basic statistics
        total_experiments = len(results)
        successful_experiments = len([r for r in results if r.response])
        compression_experiments = len([r for r in results if r.compression_applied])

        total_input_tokens = sum(r.input_tokens for r in results)
        total_output_tokens = sum(r.output_tokens for r in results)
        avg_response_time = sum(r.response_time for r in results) / total_experiments

        print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {total_experiments}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {successful_experiments}")
        print(f"   –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å–æ —Å–∂–∞—Ç–∏–µ–º: {compression_experiments}")
        print(
            f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_experiments/total_experiments)*100:.1f}%"
        )

        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤:")
        print(f"   –û–±—â–∏–µ –≤—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {total_input_tokens}")
        print(f"   –û–±—â–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {total_output_tokens}")
        print(f"   –û–±—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {total_input_tokens + total_output_tokens}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.2f} —Å–µ–∫")

        # Compression analysis
        compressed_results = [r for r in results if r.compression_applied]
        if compressed_results:
            print(f"\nüóúÔ∏è  –ê–Ω–∞–ª–∏–∑ —Å–∂–∞—Ç–∏—è:")
            print(f"   –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å–æ —Å–∂–∞—Ç–∏–µ–º: {len(compressed_results)}")

            avg_compression_ratio = sum(
                r.compression_result.compression_ratio for r in compressed_results
            ) / len(compressed_results)

            print(f"   –°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {avg_compression_ratio:.2f}")

            # Compare strategies
            strategies = {}
            for r in compressed_results:
                strategy = r.compression_result.strategy_used
                if strategy not in strategies:
                    strategies[strategy] = []
                strategies[strategy].append(r.compression_result.compression_ratio)

            print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∂–∞—Ç–∏—è:")
            for strategy, ratios in strategies.items():
                avg_ratio = sum(ratios) / len(ratios)
                print(
                    f"     {strategy}: {avg_ratio:.2f} (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {len(ratios)})"
                )

        # Performance analysis
        print(f"\n‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        fastest_result = min(results, key=lambda r: r.response_time)
        slowest_result = max(results, key=lambda r: r.response_time)

        print(
            f"   –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç: {fastest_result.experiment_name} ({fastest_result.response_time:.2f} —Å–µ–∫)"
        )
        print(
            f"   –°–∞–º—ã–π –º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {slowest_result.experiment_name} ({slowest_result.response_time:.2f} —Å–µ–∫)"
        )
        print(
            f"   –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: {slowest_result.response_time - fastest_result.response_time:.2f} —Å–µ–∫"
        )

    def print_recommendations(self, results: List[ExperimentResult]) -> None:
        """
        Print recommendations based on experiment results.

        Args:
            results: List of experiment results to analyze
        """
        if not results:
            print("\n‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            return

        print("\n" + "=" * 80)
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print("=" * 80)

        # Performance recommendations
        fastest_result = min(results, key=lambda r: r.response_time)
        slowest_result = max(results, key=lambda r: r.response_time)

        print(f"\n‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
        print(
            f"   –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç: {fastest_result.experiment_name} ({fastest_result.response_time:.2f} —Å–µ–∫)"
        )
        print(
            f"   –°–∞–º—ã–π –º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {slowest_result.experiment_name} ({slowest_result.response_time:.2f} —Å–µ–∫)"
        )

        # Compression recommendations
        compressed_results = [r for r in results if r.compression_applied]
        if compressed_results:
            best_compression = min(
                compressed_results, key=lambda r: r.compression_result.compression_ratio
            )
            print(f"\nüóúÔ∏è  –°–∂–∞—Ç–∏–µ:")
            print(
                f"   –õ—É—á—à–µ–µ —Å–∂–∞—Ç–∏–µ: {best_compression.experiment_name} (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {best_compression.compression_result.compression_ratio:.2f})"
            )
            print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {best_compression.compression_result.strategy_used}")

        # General recommendations
        print(f"\nüéØ –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")

        # Check if any experiments exceeded limits
        exceeded_limit = any(
            r.input_tokens > 8192 for r in results if r.model_name == "starcoder"
        )

        if exceeded_limit:
            print(f"   ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–æ—Å—ã, –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ –ª–∏–º–∏—Ç—ã –º–æ–¥–µ–ª–∏")
            print(f"   üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∂–∞—Ç–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ >8192 —Ç–æ–∫–µ–Ω–æ–≤")

        # Compression strategy recommendations
        truncation_results = [
            r
            for r in compressed_results
            if r.compression_result
            and r.compression_result.strategy_used == "truncation"
        ]
        keyword_results = [
            r
            for r in compressed_results
            if r.compression_result and r.compression_result.strategy_used == "keywords"
        ]

        if truncation_results and keyword_results:
            avg_truncation = sum(
                r.compression_result.compression_ratio for r in truncation_results
            ) / len(truncation_results)
            avg_keywords = sum(
                r.compression_result.compression_ratio for r in keyword_results
            ) / len(keyword_results)

            if avg_truncation < avg_keywords:
                print(f"   üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è 'truncation' –ª—É—á—à–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç")
            else:
                print(f"   üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è 'keywords' –ª—É—á—à–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

        print(f"   üí° –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö")
        print(f"   üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∂–∞—Ç–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤")

    def print_compression_comparison(self, results: List[ExperimentResult]) -> None:
        """
        Print detailed comparison of compression strategies.

        Args:
            results: List of experiment results to compare
        """
        compressed_results = [r for r in results if r.compression_applied]

        if not compressed_results:
            print("\n‚ùå –ù–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å–æ —Å–∂–∞—Ç–∏–µ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            return

        print("\n" + "=" * 80)
        print("üîÑ –°–†–ê–í–ù–ï–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ô –°–ñ–ê–¢–ò–Ø")
        print("=" * 80)

        strategies = {}
        for r in compressed_results:
            strategy = r.compression_result.strategy_used
            if strategy not in strategies:
                strategies[strategy] = []
            strategies[strategy].append(r)

        for strategy, strategy_results in strategies.items():
            print(f"\nüìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {len(strategy_results)}")

            avg_compression_ratio = sum(
                r.compression_result.compression_ratio for r in strategy_results
            ) / len(strategy_results)

            avg_response_time = sum(r.response_time for r in strategy_results) / len(
                strategy_results
            )
            avg_output_length = sum(len(r.response) for r in strategy_results) / len(
                strategy_results
            )

            print(f"   –°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {avg_compression_ratio:.2f}")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.2f} —Å–µ–∫")
            print(f"   –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {avg_output_length:.0f} —Å–∏–º–≤–æ–ª–æ–≤")

            # Show example of compressed text
            if strategy_results:
                example = strategy_results[0]
                print(f"   –ü—Ä–∏–º–µ—Ä —Å–∂–∞—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:")
                preview = example.compression_result.compressed_text[:150] + "..."
                print(f"     {preview}")

    def print_model_performance(self, results: List[ExperimentResult]) -> None:
        """
        Print model performance analysis.

        Args:
            results: List of experiment results to analyze
        """
        if not results:
            print("\n‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏")
            return

        print("\n" + "=" * 80)
        print("ü§ñ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ú–û–î–ï–õ–ò")
        print("=" * 80)

        # Group by model
        models = {}
        for r in results:
            if r.model_name not in models:
                models[r.model_name] = []
            models[r.model_name].append(r)

        for model_name, model_results in models.items():
            print(f"\nüîß –ú–æ–¥–µ–ª—å: {model_name}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {len(model_results)}")

            avg_response_time = sum(r.response_time for r in model_results) / len(
                model_results
            )
            avg_input_tokens = sum(r.input_tokens for r in model_results) / len(
                model_results
            )
            avg_output_tokens = sum(r.output_tokens for r in model_results) / len(
                model_results
            )

            print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.2f} —Å–µ–∫")
            print(f"   –°—Ä–µ–¥–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {avg_input_tokens:.0f}")
            print(f"   –°—Ä–µ–¥–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {avg_output_tokens:.0f}")
            print(
                f"   –°–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {avg_output_tokens/avg_response_time:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫"
            )

            # Check for errors or issues
            failed_experiments = [r for r in model_results if not r.response]
            if failed_experiments:
                print(f"   ‚ö†Ô∏è  –ù–µ—É–¥–∞—á–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {len(failed_experiments)}")
            else:
                print(f"   ‚úÖ –í—Å–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω—ã")
